{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/njdibitetto-PMKN17/R-Analytics-Portfolio/blob/main/Sorting\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hynQdyc-OnwA"
      },
      "source": [
        "# Sorting"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_HGIF5WhOnwH"
      },
      "source": [
        "## Introduction\n",
        "\n",
        "### If you look at past exams, every one of them (bar the SP25 MT1 as an exception) has one or more sorting exercises on them. Just sayin............"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NLfq3nj8OnwI"
      },
      "source": [
        "It's common for programmer to want to sort groups of data. For example, we might want to sort a list of employees by their start date. Python provides a built in function for doing this sort of work: `sorted()` (see the [documentation](https://docs.python.org/3/library/functions.html#sorted) for more details).\n",
        "\n",
        "- Python has an entire tutorial dedicated to [Sorting](https://docs.python.org/3/howto/sorting.html).\n",
        "  - Many of the examples, and even some of the text in this notebook, are taken directly from this tutorial."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "63C6bvDuOnwJ"
      },
      "source": [
        "## Simple Sorting"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0OnCalhTOnwK"
      },
      "source": [
        "A simple ascending sort is very easy: just call the `sorted()` function. It returns a new sorted list:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "VdNQQ84NOnwK",
        "outputId": "1eb24bc1-e9c0-4dde-dc19-8fc36343c290",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 2, 3, 4, 5]"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "my_tuple = (5, 2, 3, 1, 4)\n",
        "sorted(my_tuple)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cl8lLH1DOnwL"
      },
      "source": [
        "- You can pass any iterable to `sorted()`.\n",
        "- Notice that `sorted()` returns a `list`.\n",
        "  - If you need a different type, you'll need to cast it to the new type.\n",
        "\n",
        "If we want, we can use the `reverse` keyword to return the items in reverse order:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "JsRqwgjcOnwM",
        "outputId": "b2890802-33a4-4c67-8b51-94451be0156c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[5, 4, 3, 2, 1]"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "my_tuple = (5, 2, 3, 1, 4)\n",
        "sorted(my_tuple, reverse=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TI7fSjilOnwM"
      },
      "source": [
        "## Key Functions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CT-8NarxOnwM"
      },
      "source": [
        "By default, Python will simply use the `<` operator to compare values. So, when determining order of integers, `sorted()` will evaluate the expression `a < b` for various values and use the results to order the items.\n",
        "\n",
        "However, we can call a function on each item *before* this comparison is made. This gives us a lot of power to arbitrarily order our iterables.\n",
        "\n",
        "**For example, we can sort a list of tuples by checking the 3rd element in the list.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "kWRFJLFeOnwN",
        "outputId": "46cccbdc-f9df-4ece-da9c-4b8f2b16c596",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('Alyssa', 'B', 12),\n",
              " ('Jeffrey', 'A', 15),\n",
              " ('Padmaja', 'B', 10),\n",
              " ('zzz', 'Z', 1)]"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "# Define the list of tuples\n",
        "# each tuple has name, grade, credits earned\n",
        "student_tuples = [\n",
        "    ('zzz', 'Z', 1),\n",
        "    ('Jeffrey', 'A', 15),\n",
        "    ('Alyssa', 'B', 12),\n",
        "    ('Padmaja', 'B', 10),\n",
        "]\n",
        "\n",
        "# Method 1: Create the function traditionally --------------------------\n",
        "def sorting_func(tup):\n",
        "    return tup[0]  #sort by name\n",
        "    # return -tup[2]  #sort by credits earned in descending order. (you don't have to do reverse = TRUE)\n",
        "\n",
        "# Return the sorted tuples\n",
        "sorted(student_tuples, key=sorting_func)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sorted(student_tuples)"
      ],
      "metadata": {
        "id": "oOlGC4ze0gY4",
        "outputId": "9d74a2ad-6500-4838-df55-dfa133fbba3c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('Alyssa', 'B', 12),\n",
              " ('Jeffrey', 'A', 15),\n",
              " ('Padmaja', 'B', 10),\n",
              " ('zzz', 'Z', 1)]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Below is to write a lambda function as an alternative to the method above."
      ],
      "metadata": {
        "id": "j3qjDfld0oyP"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JUHSGLKj1cBO"
      },
      "source": [
        "### This one below is a good one to know."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "KpqnoLRp1cBP",
        "outputId": "c79674fa-0fd9-4fd8-c872-8c39d3216c1a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('zzz', 'Z', 1), ('Padmaja', 'B', 10), ('Alyssa', 'B', 12), ('Jeffrey', 'A', 15)]\n",
            "[('Jeffrey', 'A', 15), ('Alyssa', 'B', 12), ('Padmaja', 'B', 10), ('zzz', 'Z', 1)]\n",
            "[('Alyssa', 'B', 12), ('Jeffrey', 'A', 15), ('Padmaja', 'B', 10), ('zzz', 'Z', 1)]\n",
            "[('zzz', 'Z', 1), ('Padmaja', 'B', 10), ('Jeffrey', 'A', 15), ('Alyssa', 'B', 12)]\n"
          ]
        }
      ],
      "source": [
        "# Method 2: Use a lambda function --------------------------------------\n",
        "\n",
        "# sort in ascending order, for credits earned\n",
        "#Tup[2] is the credit section of the tuple which it will sort by.\n",
        "#for tup: tup[2] it has to be the same context so if its nugget, then its nugget : nugget[2]\n",
        "print(sorted(student_tuples, key=lambda tup: tup[2]))\n",
        "\n",
        "# sort in descending order, for credits earned\n",
        "print(sorted(student_tuples, key=lambda tup: -tup[2]))\n",
        "\n",
        "# sort in ascending order, by name\n",
        "print(sorted(student_tuples, key=lambda tup: tup[0]))\n",
        "\n",
        "# sort in descending order, by name\n",
        "print(sorted(student_tuples, key=lambda tup: tup[0],reverse=True))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "acLda7zt1cBP",
        "outputId": "06b264a0-abfe-4bba-c57b-2ed1c639aa79",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('zzz', 'Z', 1),\n",
              " ('Padmaja', 'B', 10),\n",
              " ('Jeffrey', 'A', 15),\n",
              " ('Alyssa', 'B', 12)]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "# sort by name, in descending order\n",
        "\n",
        "# this one throws an error. Why?\n",
        "#sorted(student_tuples, key=lambda tup: -tup[0])\n",
        "# It doesn't like it because it is a string.\n",
        "\n",
        "# Example\n",
        "\n",
        "#sorted(student_tuples, key=lambda tup: -\"zzz\")\n",
        "\n",
        "sorted(student_tuples, key=lambda tup: -15)\n",
        "\n",
        "\n",
        "# this one is correct\n",
        "sorted(student_tuples, key=lambda tup: tup[0], reverse=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FoTyhQJZ1cBP"
      },
      "source": [
        "#### If you are asked sort strings in descending order, you must use the `reverse=True` parameter."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TQ8MErUz1cBP"
      },
      "source": [
        "### What if we want to sort by a specific index, and break any ties using a different index?\n",
        "\n",
        "### Again, something good to know how to do.\n",
        "\n",
        "#### For example, sort the `student_tuples` list first by grade ascending and break any ties by credits earned in descending order."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "fXbLcJai1cBP",
        "outputId": "3fdb3afc-1c5e-48a3-e738-4045e0fccbc0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('Jeffrey', 'A', 15),\n",
              " ('Alyssa', 'B', 12),\n",
              " ('Padmaja', 'B', 10),\n",
              " ('zzz', 'Z', 1)]"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "sorted(student_tuples, key=lambda tup: (tup[1], -tup[2]))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iGVioBMM1cBP"
      },
      "source": [
        "**As above Note that the `-` syntax only works for numeric (integer and float) variables.**\n",
        "\n",
        "If we were to try to do a descending sort with `-` using one of the string variables, it would throw an error."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "kV5dz6r01cBP"
      },
      "outputs": [],
      "source": [
        "# uncomment to see the error\n",
        "# sorted(student_tuples, key=lambda tup: (tup[1], -tup[0]))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wR9o1rtZBtk7"
      },
      "source": [
        "### So let's say that you have a list of tuples, in which all of the elements are strings.\n",
        "\n",
        "#### Here is an example to sort alphabetically with the first tuple element, and then alphabetically descending with the second tuple element.\n",
        "\n",
        "Because we cannot sort a \"tie-breaker\" (secondary sort condition) that is a string, in descending order, we have to do this in **2 STEPS**.\n",
        "\n",
        "The steps are:\n",
        "\n",
        "1.  Sort the element in the secondary sort condition in your initial step, into a new variable.\n",
        "\n",
        "2.  Sort the new variable that you just created, using the primary sort condition, again into a new variable."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "7zfmNB6cBtk7",
        "outputId": "a485b47b-6c9c-4dc9-bf4f-9a926f37e62b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "[('apple', 'apple'),\n",
              " ('apple', 'orange'),\n",
              " ('banana', 'grape'),\n",
              " ('apple', 'banana'),\n",
              " ('banana', 'apple'),\n",
              " ('banana', 'banana')]"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "data = [('apple','apple'),('apple', 'orange'), ('banana', 'grape'),\n",
        "          ('apple', 'banana'), ('banana', 'apple'),('banana','banana')]\n",
        "display(data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "J7N8byLYBtk7",
        "outputId": "e9621c70-8427-42f7-ecae-0b637e9a7e4c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('apple', 'orange'), ('apple', 'banana'), ('apple', 'apple'), ('banana', 'grape'), ('banana', 'banana'), ('banana', 'apple')]\n"
          ]
        }
      ],
      "source": [
        "# Requirement:  Sort by the first string (ascending) and second string (descending)\n",
        "# you want to sort your secomdary condition first. dont havw to print second, but that follows into first and print first.\n",
        "\n",
        "\n",
        "# First step, sort by the secondary condition (string descending)\n",
        "s=sorted(data,key=lambda x:x[1],reverse=True) #secondary sort condition\n",
        "\n",
        "# Second step, sort by the primary condition (string ascending)\n",
        "sorted_data=sorted(s,key=lambda x:x[0]) #primary sort condition\n",
        "\n",
        "print(sorted_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MharuhG-Btk7"
      },
      "source": [
        "## Now let's look at sorting a dictionary.\n",
        "\n",
        "### A common use case is to sort a dictionary by value descending, then key ascending if there is a tie in the values.\n",
        "\n",
        "### After the sort, you might be asked to return the top 5 most elements.\n",
        "\n",
        "### Let's look at how we might do this."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dD6xxFdjBtk7"
      },
      "source": [
        "#### Assume a dictionary d counts the occurrences that each number gets called.\n",
        "\n",
        "*  Return a list of the 5 most prevalent values. If the counts are the same, sort by key ascending."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "JUK6o8_jBtk7",
        "outputId": "99da2f6c-0e3f-48c1-d0d6-d1322e6ae914",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "{0: 9,\n",
              " 1: 1,\n",
              " 2: 2,\n",
              " 3: 2,\n",
              " 4: 3,\n",
              " 5: 2,\n",
              " 6: 4,\n",
              " 7: 2,\n",
              " 8: 4,\n",
              " 9: 3,\n",
              " 10: 3,\n",
              " 11: 1,\n",
              " 12: 5,\n",
              " 13: 1,\n",
              " 14: 3,\n",
              " 15: 3,\n",
              " 16: 4,\n",
              " 17: 1,\n",
              " 18: 5,\n",
              " 19: 1}"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "d={}\n",
        "# don't worry about how the multiple loops work, just look at the output\n",
        "for size in range(1,10):\n",
        "  for i in range(0,20,size):\n",
        "    if i not in d.keys():\n",
        "      d[i]=0\n",
        "    d[i]+=1\n",
        "\n",
        "display(d)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "sRqKj8ykBtk7",
        "outputId": "49b01a84-80f2-4069-add5-59ce0889da72",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "dict_items([(0, 9), (1, 1), (2, 2), (3, 2), (4, 3), (5, 2), (6, 4), (7, 2), (8, 4), (9, 3), (10, 3), (11, 1), (12, 5), (13, 1), (14, 3), (15, 3), (16, 4), (17, 1), (18, 5), (19, 1)])"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(0, 9), (12, 5), (18, 5), (6, 4), (8, 4)]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "# what does the items() function do?\n",
        "display(d.items())\n",
        "\n",
        "sorted(d.items(),key=lambda x:(-x[1],x[0]))[:5]\n",
        "#' want in descending order, by -x[1], then if there is a tie, then x[0] will place the lower integer first to break tie."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f7Cn6K9LOnwN"
      },
      "source": [
        "## A more complex example, using `sorted()`\n",
        "\n",
        "### Recall this complex data structure, from the nested data notebook."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "ePUnbB3J1cBP"
      },
      "outputs": [],
      "source": [
        "my_family = [\n",
        "  { \"family_name\": \"Tunnicliffe\",\n",
        "    \"num_people\": 4,\n",
        "    \"local\": True,\n",
        "    \"city\": \"Bethpage, NY\",\n",
        "    \"date_established\": 2014,\n",
        "    \"names\": [\"Diane\", \"Steve\", \"Dylan\", \"Landon\"],\n",
        "    \"number_of_children\": 2,\n",
        "    \"children\": [\n",
        "      {\n",
        "        \"name\": \"Dylan\",\n",
        "        \"age\": 2,\n",
        "        \"favorite_color\": \"black\",\n",
        "        \"nickname\": \"Dillybeans\",\n",
        "        \"loves\": \"Super Mario\",\n",
        "      },\n",
        "      {\n",
        "        \"name\": \"Landon\",\n",
        "        \"age\": 5,\n",
        "        \"favorite_color\": \"blue\",\n",
        "        \"nickname\": \"Landybean\",\n",
        "        \"loves\": \"trucks\",\n",
        "      }\n",
        "    ]\n",
        "  },\n",
        "  { \"family_name\": \"Agulnick\",\n",
        "    \"num_people\": 5,\n",
        "    \"local\": False,\n",
        "    \"city\": \"Newton, MA\",\n",
        "    \"date_established\": 1987,\n",
        "    \"names\": [\"Ellen\", \"Mark\", \"Diane\", \"Joshua\", \"Allison\"],\n",
        "    \"number_of_children\": 3,\n",
        "    \"children\": [\n",
        "      {\n",
        "        \"name\": \"Diane\",   # note that Diane and Joshua are the same age, so are twins\n",
        "        \"age\": 31,\n",
        "        \"favorite_color\": \"pink\",\n",
        "        \"nickname\": \"Dini\",\n",
        "        \"loves\": \"unicorns\",\n",
        "      },\n",
        "      {\n",
        "        \"name\": \"Joshua\",  # note that Diane and Joshua are the same age, so are twins\n",
        "        \"age\": 31,\n",
        "        \"favorite_color\": \"red\",\n",
        "        \"nickname\": \"Joshie\",\n",
        "        \"loves\": \"trains\",\n",
        "      },\n",
        "      {\n",
        "        \"name\": \"Allison\",\n",
        "        \"age\": 26,\n",
        "        \"favorite_color\": \"purple\",\n",
        "        \"nickname\": \"Alli\",\n",
        "        \"loves\": \"candy\",\n",
        "      }\n",
        "    ]\n",
        "  }\n",
        "]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZhPZYV6D1cBP"
      },
      "source": [
        "As before, we can go to Python Tutor to visualize the data.\n",
        "\n",
        "https://pythontutor.com/python-debugger.html#mode=edit"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0ySutxTL1cBQ"
      },
      "source": [
        "### Find the Oldest and Youngest child\n",
        "\n",
        "#### This question uses sorting and a lambda function, in conjunction with other programming logic.\n",
        "\n",
        "#### The code here represents what might be required to solve a 2-point question on an exam."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lFS9ps4e1cBQ"
      },
      "source": [
        "### Requirement:\n",
        "\n",
        "Return a tuple with two string elements.\n",
        "\n",
        "The first element is the name of the oldest child.\n",
        "\n",
        "The second element is the name of the youngest child.\n",
        "\n",
        "If there are two or more children with the same age, return the name of the child whose name is last alphabetically.\n",
        "\n",
        "Because of the risk of coding complexity, you can assume that the only possibility of an \"age tie\" is for the oldest children."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "8Dit8_D_1cBQ"
      },
      "outputs": [],
      "source": [
        "def oldest_youngest(my_family):\n",
        "\n",
        "    #### YOUR CODE HERE\n",
        "     oldest_child = None\n",
        "     youngest_child = None\n",
        "     children = []\n",
        "\n",
        "     for unit in my_family:\n",
        "         for child in unit['children']:\n",
        "             children.append(child)\n",
        "#' each indivdual child dictionary is being added into that empty list called Children we initalized above.\n",
        "         #print(children)\n",
        "#This will\n",
        "\n",
        "    # # because we cannot sort strings descending as the secondary sort, just sort in ascending/alphabetical order\n",
        "     sorted_children = (sorted(children, key = lambda child: (child['age'],child['name'])))\n",
        "    # # what does this look like?\n",
        "     #print(sorted_children)\n",
        "\n",
        "    # let's see what this looks like, a bit simpler\n",
        "     rl=[(i['name'],i['age']) for i in sorted_children]\n",
        "     #display(rl)\n",
        "\n",
        "    # # oldest child, with tie breaker, will be the last one in the list of dicts\n",
        "    # this process gives the empty variable a value\n",
        "     oldest_child = sorted_children[-1]['name']\n",
        "\n",
        "    # # youngest child will be the first in the list of dicts\n",
        "    # this process gives the empty variable a value\n",
        "     youngest_child = sorted_children[0]['name']\n",
        "\n",
        "     return (oldest_child, youngest_child)\n",
        "\n",
        "     pass   # placeholder"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "oldest_youngest(my_family)\n",
        "# This prints from that children list we created above that as defined -\n",
        "# in oldest_youngest. If everthing under print(children) is commented."
      ],
      "metadata": {
        "id": "PnB36g5v719w",
        "outputId": "b271b96a-ece2-420f-fc60-c3d5ff4a1e52",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('Joshua', 'Dylan')"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "oldest_youngest(my_family)\n",
        "# If top is re run  all the way through, but without any displays and prints shown\n",
        "# it will give answer for oldest and youngest child of Dylan and Joshua"
      ],
      "metadata": {
        "id": "GUfNuSXE9KlB",
        "outputId": "bb437a6e-d10a-4798-835a-92f1bcc2ff79",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('Joshua', 'Dylan')"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "ykxFOAhY1cBQ",
        "outputId": "356cb5ee-b4fb-4b45-ce73-432fac294b97",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The oldest child is Joshua. The youngest child is Dylan.\n"
          ]
        }
      ],
      "source": [
        "# will return error until function above is written\n",
        "# so comment out for deployment and uncomment when teaching\n",
        "(oldest,youngest) = oldest_youngest(my_family)\n",
        "\n",
        "print(f\"The oldest child is {oldest}. The youngest child is {youngest}.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9JhNxCZ-OnwN"
      },
      "source": [
        "## Final Thoughts: Sorting in Place"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hayAnW42OnwN"
      },
      "source": [
        "Using `sorted()` **does not change the original iterable.** It simply returns a new list.\n",
        "\n",
        "However, Python lists have a method, `list.sort()`, which **does** change the original list. This means you will be modifing your original data!\n",
        "\n",
        "- **Do not use this unless you know *for a fact* that you will not need the original list.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "UddyabT-OnwN",
        "outputId": "f0341e13-f712-4bc0-89bd-8ced14a1e9e6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First list ID: 136879624939520\n",
            "Second list ID: 136879616215296\n",
            "OK, modifying the first list won't impact the second list.\n"
          ]
        }
      ],
      "source": [
        "first_list = [2, 7, 3, 9, 10, 1]\n",
        "second_list = first_list.copy()\n",
        "\n",
        "# Are these the *same* list, or are they different?\n",
        "print(\"First list ID:\", id(first_list))\n",
        "print(\"Second list ID:\", id(second_list))\n",
        "\n",
        "if id(first_list) == id(second_list):\n",
        "    print(\"Wait, these are the same list!\")\n",
        "else:\n",
        "    print(\"OK, modifying the first list won't impact the second list.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "MgsSWBzM1cBQ",
        "outputId": "769db998-c7f4-47a3-ab35-9f166fe9a685",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "What does our sorted first_list look like? [1, 2, 3, 7, 9, 10]\n",
            "What does our original first_list look like? [2, 7, 3, 9, 10, 1]\n"
          ]
        }
      ],
      "source": [
        "first_list_sorted = sorted(first_list)\n",
        "print(\"What does our sorted first_list look like?\", first_list_sorted)\n",
        "print(\"What does our original first_list look like?\", first_list)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "_Fvs3Tu21cBQ",
        "outputId": "01d4537b-1598-4f49-8b51-9268cfc3ee5f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "What does the return value of the .sort() method look like? None\n",
            "What does our original second_list look like? [1, 2, 3, 7, 9, 10]\n"
          ]
        }
      ],
      "source": [
        "second_list_output = second_list.sort()\n",
        "print(\"What does the return value of the .sort() method look like?\", second_list_output)\n",
        "print(\"What does our original second_list look like?\", second_list)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#explains why none is the output for the .sort method.\n",
        "second_list_output = second_list\n",
        "print(second_list_output)"
      ],
      "metadata": {
        "id": "kXmItjJe_Hfh",
        "outputId": "fea0e2ef-d0d1-43fa-ab64-156cf43a456b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 7, 9, 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CW8Hz23XOnwO"
      },
      "source": [
        "## This is important for you to understand, for the exams!!\n",
        "\n",
        "We can see from the output above that the `.sort()` method will change the original list. Keep this in mind if you need to sort something.\n",
        "\n",
        "For this reason, we generally recommend to use the `sorted()` function and assign the result to a **NEW VARIABLE**.\n",
        "\n",
        "**This is one of the scenarios that we typically see in exams, when the test case variables return a failure because the student has modified an input variable.**\n",
        "\n",
        "**The student has modified an input variable using `sort()`, when they should have created a new variable using `sorted()`.**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AIu8Hqnz1cBQ"
      },
      "source": [
        "## What are your questions on sorting?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "x7e28Xez1cBQ"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.7"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}